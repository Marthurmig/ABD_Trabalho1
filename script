------------- 1 ------------
--A)
select
'
CREATE DATABASE trabalho
    WITH
    OWNER = postgres  
    CONNECTION LIMIT = -1;
'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'trabalho')\gexec
ALTER DATABASE trabalho SET datestyle TO 'ISO, DMY';

--D)
CREATE TABLE paciente (
    id_paciente INTEGER PRIMARY KEY,
    codigo NUMERIC UNIQUE,
    nome VARCHAR(50),
    idade NUMERIC
);

CREATE TABLE medico (
    id_medico INTEGER PRIMARY KEY,
    crm NUMERIC UNIQUE,
    nome VARCHAR(50),
    especialidade VARCHAR
);

CREATE TABLE atende (
    id_atende INTEGER PRIMARY KEY,
    id_paciente INTEGER,
    id_medico INTEGER,
    data_consulta DATE,
    FOREIGN KEY (id_paciente) REFERENCES paciente(id_paciente),
    FOREIGN KEY (id_medico) REFERENCES medico(id_medico)
);

CREATE TABLE cirurgia (
    id_cirurgia INTEGER PRIMARY KEY,
    codigo NUMERIC UNIQUE,
    data_consulta DATE,
    descricao VARCHAR,
    id_paciente INTEGER,
    FOREIGN KEY (id_paciente) REFERENCES paciente(id_paciente)
);

-------------- Bonus (inserindo 6 linhas em cada tabela) --------------

-- Inserções na tabela paciente
INSERT INTO paciente (id_paciente, codigo, nome, idade) VALUES
(1, 123456, 'João', 35),
(2, 789012, 'Maria', 28),
(3, 345678, 'Pedro', 42),
(4, 901234, 'Ana', 50),
(5, 567890, 'Mariana', 31),
(6, 432109, 'Carlos', 47);

-- Inserções na tabela medico
INSERT INTO medico (id_medico, crm, nome, especialidade) VALUES
(1, 987654, 'Dr. Silva', 'Clínico Geral'),
(2, 654321, 'Dr. Santos', 'Pediatra'),
(3, 210987, 'Dra. Oliveira', 'Ginecologista'),
(4, 876543, 'Dr. Almeida', 'Cardiologista'),
(5, 543210, 'Dra. Costa', 'Dermatologista'),
(6, 109876, 'Dr. Pereira', 'Ortopedista');

-- Inserções na tabela atende
INSERT INTO atende (id_atende, id_paciente, id_medico, data_consulta) VALUES
(1, 1, 1, '2024-04-01'),
(2, 2, 2, '2024-04-02'),
(3, 3, 3, '2024-04-03'),
(4, 4, 4, '2024-04-04'),
(5, 5, 5, '2024-04-05'),
(6, 6, 6, '2024-04-06');

-- Inserções na tabela cirurgia
INSERT INTO cirurgia (id_cirurgia, codigo, data_consulta, descricao, id_paciente) VALUES
(1, 123, '2024-04-10', 'Cirurgia de apendicite', 1),
(2, 456, '2024-04-15', 'Cirurgia de hérnia', 2),
(3, 789, '2024-04-20', 'Cirurgia de catarata', 3),
(4, 321, '2024-04-25', 'Cirurgia cardíaca', 4),
(5, 654, '2024-04-30', 'Cirurgia plástica', 5),
(6, 987, '2024-05-05', 'Cirurgia de joelho', 6);

----------------- 3 -----------------
CREATE OR REPLACE FUNCTION f_verificaIntervaloData(dataInicio atende.data_consulta%type, dataFim atende.data_consulta%type)
RETURNS SETOF RECORD
AS $$
DECLARE
    result RECORD;
BEGIN
    FOR result IN
        SELECT m.nome as nome_medico,
               COUNT(at.id_atende) as contador
        FROM atende at
        INNER JOIN medico m ON m.id_medico = at.id_medico
        WHERE at.data_consulta BETWEEN dataInicio AND dataFim
        GROUP BY m.nome
        ORDER BY m.nome
    LOOP
        RETURN NEXT result;
    END LOOP;

    IF NOT FOUND THEN
        RAISE 'Intervalo da data % não foi encontrado', dataInicio USING ERRCODE = 'ERR01';
    END IF;
END;
$$ LANGUAGE plpgsql;

uso: SELECT * FROM f_verificaIntervaloData('2024-01-01', '2024-12-31') AS (nome_medico VARCHAR, contador BIGINT);

----------------- 4 -----------------